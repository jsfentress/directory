---
interface Event {
  id: number;
  title: string;
  venue: string;
  date: string;
  time: string;
  vibe: string[];
  price: string;
  image: string;
  description: string;
}

const { event } = Astro.props as { event: Event };

// Format date for display
const formattedDate = new Date(event.date).toLocaleDateString('en-US', {
  weekday: 'short',
  month: 'short',
  day: 'numeric'
});

// Get vibe color classes
const getVibeColor = (vibe: string) => {
  const vibeColors: Record<string, string> = {
    'chill': 'bg-blue-100 text-blue-800',
    'acoustic': 'bg-green-100 text-green-800',
    'rowdy': 'bg-red-100 text-red-800',
    'rock': 'bg-purple-100 text-purple-800',
    'jazz': 'bg-yellow-100 text-yellow-800',
    'outdoor': 'bg-emerald-100 text-emerald-800'
  };
  return vibeColors[vibe] || 'bg-gray-100 text-gray-800';
};
---

<article class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300">
  <div class="aspect-video bg-gray-200 flex items-center justify-center">
    <span class="text-gray-500 text-sm">Event Image</span>
  </div>
  
  <div class="p-6">
    <div class="flex justify-between items-start mb-3">
      <h3 class="text-xl font-bold text-gray-900">{event.title}</h3>
      <span class="text-lg font-semibold text-green-600">
        {isNaN(Number(event.price)) ? event.price : `$${event.price}`}
      </span>
    </div>
    
    <p class="text-gray-600 mb-2">{event.venue}</p>
    
    <div class="flex items-center text-sm text-gray-500 mb-3">
      <span>{formattedDate}</span>
      <span class="mx-2">â€¢</span>
      <span>{event.time}</span>
    </div>
    
    <p class="text-gray-700 mb-4 line-clamp-2">{event.description}</p>
    
    <div class="flex flex-wrap gap-2">
      {event.vibe.map(vibe => (
        <span class={`px-2 py-1 rounded-full text-xs font-medium ${getVibeColor(vibe)}`}>
          {vibe}
        </span>
      ))}
    </div>
  </div>
</article> 